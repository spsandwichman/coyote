// if less_than is null, try to generate a default function
pub fun quicksort(def T: type, items: []T, def less_than: ?fun(rhs, lhs: T): bool) {    
    if less_than {
        qsort(T, items, def, less_than.?, 0, items.len - 1);
    } else {
        fun less_than_auto(rhs, lhs: T): bool {
            rhs < lhs
        }
        qsort(T, items, def, less_than_auto, 0, items.len - 1);
    }
    
}

fun qsort(def T: type, items: []T, def less_than: fun(rhs, lhs: T): bool, lo, hi: usize) {
    if lo >= hi || lo < 0 {
        return;
    }

    let p = partition(T, items, less_than, lo, hi);

    qsort(items, lo, p - 1);
    qsort(items, p + 1, hi);
}

fun partition(def T: type, items: []T, def less_than: fun(rhs, lhs: T): bool, lo, hi: usize): usize {
    let pivot = items[hi];
    mut i = lo;

    for j in lo..hi {
        if less_than(items[j], pivot) {
            items[i], items[j] = items[j], items[i];
            i += 1;
        }
    }

    items[i], items[hi] = items[hi], items[i];
    i
}

pub fun foo() {
    let x = [_]isize.{4, 0, 2, 1, 3};
    
    // let qsort generate a less_than
    qsort(isize, &x, null);
}