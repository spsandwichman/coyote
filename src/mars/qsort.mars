pub fun quicksort(def T: type, items: []T, def less_than: fun(rhs, lhs: T): bool) {
    qsort(T, items, def, 0, items.len - 1);
}

fun qsort(def T: type, items: []T, def less_than: fun(rhs, lhs: T): bool, lo, hi: usize) {
    if lo >= hi || lo < 0 {
        return;
    }

    let p = partition(T, items, lo, hi);

    qsort(items, lo, p - 1);
    qsort(items, p + 1, hi);
}

fun partition(def T: type, items: []T, lo, hi: usize): usize {
    let pivot = items[hi];
    mut i = lo;

    for j in lo..hi {
        if items[j] <= pivot {
            items[i], items[j] = items[j], items[i];
            i += 1;
        }
    }

    items[i], items[hi] = items[hi], items[i];
    i
}

pub fun foo() {
    let x = [_]isize.{4, 0, 2, 1, 3};
    
    fun less(rhs, lhs: isize) {
        rhs < rhs
    }

    qsort(isize, &x, less);
}


mut x = 1;

x, mut y = .{1, 2};